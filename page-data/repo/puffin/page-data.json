{"componentChunkName":"component---src-pages-repo-puffin-mdx","path":"/repo/puffin/","webpackCompilationHash":"d010cc14166365843071","result":{"data":{"readme":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Puffin\"), mdx(\"p\", null, \"What's up? Puffins, that's what.\"), mdx(\"p\", null, \"A CLI tool for keeping dotfiles and brew dependencies in sync. The goal is to have one consistent dev environment across any computer.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Usage: puffin [command]\\n\\nOptions:\\n  -V, --version  output the version number\\n  -h, --help     output usage information\\n\\nCommands:\\n  install        Run brew install commands\\n  install-apps   Run brew install apps commands\\n  reload         rsync the dotfiles\"))), mdx(\"p\", null, \"Requires:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://brew.sh/\"\n  }), \"homebrew\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://nodejs.org/\"\n  }), \"node\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/robbyrussell/oh-my-zsh\"\n  }), \"oh-my-zsh\"))), mdx(\"h2\", null, \"Getting Started\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WARNING: Puffin will override your current dotfiles. Make a backup if you want to preserve existing files\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"sh\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-sh\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"# Install Homebrew\\n/usr/bin/ruby -e \\\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\\\"\\n\\n# Install oh-my-zsh\\nsh -c \\\"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\\\"\\n\\n# Install Node\\nbrew install node\\n\\n# Install Puffin\\nnpm install -g puffin\\n\\npuffin install\\npuffin install-apps\\npuffin reload\\n. ~/.zshrc # I cant find a good way to reload zsh via node\"))), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"puffin install\")), mdx(\"p\", null, \"Uses \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://brew.sh/\"\n  }), \"homebrew\"), \" to install dependencies.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fasd\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"git\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"htop\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"massren\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"node\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reattach-to-user-namespace\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tig\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tmux\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ansiweather\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fzf\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ripgrep\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sops\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"todo-txt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"vim\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"visidata\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"yarn\")), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"puffin install-apps\")), mdx(\"p\", null, \"Uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brew cask\"), \" to install apps.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1password\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"alfred\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bettertouchtool\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dropbox\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"firefox\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"google-chrome\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"iterm2\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"slack\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"spotify\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the-unarchiver\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"transmit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"visual-studio-code\")), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"puffin reload\")), mdx(\"p\", null, \"Rsyncs dotfiles from puffin to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$HOME\"), \" folder.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".aliases\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".functions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".tigrc\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".tmux.conf\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".vimrc\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".zshrc\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".vim/\"))), mdx(\"h2\", null, \"Config Environment Variables\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PUFFIN_WEATHER_LOCATION\"), \" Sets ansiweather location. Defaults to 'Melbourne, AU'.\"), mdx(\"p\", null, \"Each file will try to source \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".xxx.local\"), \" at the very end. This lets you add any computer specific configs to each file.\\nFor example you may choose to place some environment variables in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".zshrc.local\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{}}}}